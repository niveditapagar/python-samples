"""
1) The code plays the Tic Tac Toe Game with Two players sitting on the same computer and decides whether a player won
the game or it was a tie.
2) It keeps playing until the players want to stop
"""

import random


def print_board(board):
    """This function prints the board every time this function is called. The changes made to the variable the_board
    don't affect the code as we are printing the values associated with the indices"""
    print(str(board[7]) + ' | ' + str(board[8]) + ' | ' + str(board[9]))
    print('---------')
    print(str(board[4]) + ' | ' + str(board[5]) + ' | ' + str(board[6]))
    print('---------')
    print(str(board[1]) + ' | ' + str(board[2]) + ' | ' + str(board[3]))


def player_input():
    """This function decides which marker (X, O) belongs to which player and returns a tuple (X,O) depending on the
    players choice"""
    marker = ''
    while marker.upper() != 'X' and marker.upper() != 'O':
        marker = input('Player 1: Choose your marker : ')
    if marker.upper() == 'X':
        return 'X', 'O'
    return 'O', 'X'


def place_marker(board, marker, pos):
    """This function takes in the arguments board, marker and position and places the marker at the specified position
    on the board"""
    board[pos] = marker


def win_check(board, mark):
    """This function checks if a player has won by checking if the marker on the board satisfies any of the win
    combinations"""
    return ((board[1] == mark and board[2] == mark and board[3] == mark) or  # row 1
            (board[4] == mark and board[5] == mark and board[6] == mark) or  # row 2
            (board[7] == mark and board[8] == mark and board[9] == mark) or  # row 3
            (board[1] == mark and board[4] == mark and board[7] == mark) or  # column 1
            (board[2] == mark and board[5] == mark and board[8] == mark) or  # column 2
            (board[3] == mark and board[6] == mark and board[9] == mark) or  # column 3
            (board[3] == mark and board[5] == mark and board[7] == mark) or  # diagonal
            (board[1] == mark and board[5] == mark and board[9] == mark))  # diagonal


def choose_first():
    """This functions randomly decides which player goes first"""
    flip = random.randint(0, 1)
    if flip == 0:
        return 'Player 1'
    return 'Player 2'


def space_check(board, pos):
    """This function decides if the specified position on the board is free or not"""
    return pos in range(1, 10) and board[pos] == ' '


def full_board_check(board):
    """This function uses the space_check() function to determine if the board is full or not"""
    for i in range(1, 10):
        if space_check(board, i):
            return False
    return True


def player_choice(board):
    """This function asks the user to choose a position at which they want to place their marker and places it if the
    specified position is available"""
    pos = 0
    while not space_check(board, pos):
        try:
            pos = int(input('Choose a position (1-9)'))
        except ValueError:
            print("Please choose a valid number!")
    return pos


def replay():
    """This function asks the player if they want to play again or quit"""
    choice = input('Do you want to play again? Enter y/n')
    return choice.lower() == 'y'


'''The main logic of the code starts here '''

print('Welcome to Tic Tac Toe')

while True:
    # Create an empty board of length 10
    # We actually only need 9 but it is easier to associate the indices with positions
    the_board = [' '] * 10

    # unpack the tuple generated by the player_input() function and assign the corresponding markers
    player1_marker, player2_marker = player_input()

    # Decide who goes first and let the players know by printing it out
    turn = choose_first()
    print(turn + ' will go first')

    answer_start_game = False
    while not answer_start_game:
        # This is optional : Ask the players if they are ready to play and continue if they enter 'y'
        play_game = input('Ready to play ? y/n')
        if play_game.lower() == 'y':
            game_on = True
            answer_start_game = True
        elif play_game.lower() == 'n':
            game_on = False
            answer_start_game = True
        else:
            print("Please enter a valid answer!")

    # If the players are ready to play, i.e if game_on == True, start playing
    while game_on:
        if turn == 'Player 1':

            # Print the board for the players to see
            print_board(the_board)

            # Ask for the players preferred position to place the marker and place it if the position is free
            position = player_choice(the_board)
            place_marker(the_board, player1_marker, position)

            # Check if a player has won
            if win_check(the_board, player1_marker):
                print_board(the_board)
                print('PLAYER 1 HAS WON !!!')
                game_on = False

            # If no one has won, check if there is a tie by checking if the board is full
            else:
                if full_board_check(the_board):
                    print_board(the_board)
                    print('ITS A TIE !!!')
                    game_on = False

                # If no one has won and there is no tie, its the next players turn to play
                else:
                    turn = 'Player 2'

        # Repeat the same for the next player
        else:
            print_board(the_board)
            position = player_choice(the_board)
            place_marker(the_board, player2_marker, position)
            if win_check(the_board, player2_marker):
                print_board(the_board)
                print('PLAYER 2 HAS WON !!!')
                game_on = False
            else:
                if full_board_check(the_board):
                    print_board(the_board)
                    print('ITS A TIE !!!')
                    game_on = False
                else:
                    turn = 'Player 1'

    # Check if the players want to play again, if not, break out of the while True loop and end the program
    if not replay():
        break
